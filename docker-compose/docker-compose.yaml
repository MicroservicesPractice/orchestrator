version: '3.8'

x-all-services: &all-services
  AUTH_SERVICE: ${AUTH_SERVICE}
  REGISTRATION_SERVICE: ${REGISTRATION_SERVICE}
  USER_SERVICE: ${USER_SERVICE}

services:
  nginx-gateway:
    image: nginx:1.25.3-alpine
    container_name: nginx-gateway
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - ${AUTH_SERVICE}
      - ${REGISTRATION_SERVICE}
      - ${USER_SERVICE}
    networks:
      - shared_network

  postgres-db:
    image: postgres:16.1
    container_name: postgres-db
    ports:
      - 5432:5432
    volumes:
      - ./docker-entrypoint-initdb.d:/docker-entrypoint-initdb.d
      - postgres_db_volume:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: root
      POSTGRES_PASSWORD: 1234
      POSTGRES_PORT: 5432
      DB_USER: admin
      DB_PASS: 1111
      DB_NAME_1: kek
      DB_NAME_2: kek2
    networks:
      - shared_network

  pgadmin4:
    image: dpage/pgadmin4
    container_name: pgadmin4
    # restart: always
    ports:
      - "8888:80"
    environment:
      # host.docker.internal instead of localhost while connecting to DB in pgAdmin 
      PGADMIN_DEFAULT_EMAIL: root@example.com
      PGADMIN_DEFAULT_PASSWORD: 1234
    depends_on:
      - postgres-db
    volumes:
      - pgadmin4_volume:/var/lib/pgadmin
    networks:
      - shared_network

  auth-service:
    build:
      context: ../${AUTH_SERVICE}
      dockerfile: Dockerfile
    ports:
      - ${AUTH_SERVICE_PORT}:${AUTH_SERVICE_PORT}
    # restart: unless-stopped
    depends_on: 
      - redis-auth-service-whitelist
      - postgres-db
    environment:
      <<: [*all-services]
      REDIS_HOST: redis-auth-service-whitelist
      DB_HOST: postgres-db
      ACCESS_TOKEN_PUBLIC_SECRET_PATH: /app/cert/access.pub
      ACCESS_TOKEN_PRIVATE_SECRET_PATH: /app/cert/access
    networks:
      - shared_network

  redis-auth-service-whitelist:
    container_name: redis-auth-service-whitelist
    image: redis:7.0.11
    ports:
      - 6379:6379
    command: redis-server --loglevel warning --requirepass eYVX7EwVmmxKPCDmwMtyKVge8oLd2t81
    volumes: 
      - redis-auth-service-whitelist-volume:/data
    networks:
      - shared_network

  registration-service:
    build:
      context: ../${REGISTRATION_SERVICE}
      dockerfile: Dockerfile
    ports:
      - ${REGISTRATION_SERVICE_PORT}:${REGISTRATION_SERVICE_PORT}
    # restart: unless-stopped
    depends_on: 
      - postgres-db
    environment:
      <<: [*all-services]
      DB_HOST: postgres-db
    networks:
      - shared_network

  user-service:
    build:
      context: ../${USER_SERVICE}
      dockerfile: Dockerfile
    ports:
      - ${USER_SERVICE_PORT}:${USER_SERVICE_PORT}
      - ${GRPC_USER_SERVER_PORT}:${GRPC_USER_SERVER_PORT}
    # restart: unless-stopped
    depends_on: 
      - postgres-db
    environment:
      <<: [*all-services]
      DB_HOST: postgres-db
    networks:
      - shared_network

  notification-service:
    build:
      context: ../${NOTIFICATION_SERVICE}
      dockerfile: Dockerfile
    ports:
      - ${NOTIFICATION_SERVICE_PORT}:${NOTIFICATION_SERVICE_PORT}
    # restart: unless-stopped
    environment:
      <<: [*all-services]
    networks:
      - shared_network

  rabbitmq:
    image: rabbitmq:3.12.11-management
    hostname: rabbitmq
    restart: always
    environment:
      - RABBITMQ_DEFAULT_USER=root
      - RABBITMQ_DEFAULT_PASS=1234
      - RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS=-rabbit log_levels [{connection,error},{default,error}] disk_free_limit 2147483648
    volumes:
      - ./rabbitmq:/var/lib/rabbitmq
    ports:
      - 15672:15672
      - 5672:5672

volumes:
  postgres_db_volume:
  pgadmin4_volume:
  redis-auth-service-whitelist-volume:

networks:
  shared_network:   
    driver: bridge 